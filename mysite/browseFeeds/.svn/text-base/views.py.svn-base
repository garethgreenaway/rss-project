import re

from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import render_to_response
from django.contrib.auth.decorators import login_required

from dojango.decorators import json_response, expect_post_request

from mysite.browseFeeds.models import FeedItem, UserFeed, UserInbox, FeedStaging, Feed, Tag
from mysite.browseFeeds.forms import AddFeedForm

from datetime import datetime

def json_response(data):
	from django.utils import simplejson
	json = simplejson.dumps(data, ensure_ascii=False, default=encode_myway)
	return HttpResponse(json, mimetype='application/json', content_type='application/json; charset=UTF-8')

def encode_myway(obj):

	if isinstance(obj, FeedItem):
		return [obj.title,
			obj.url]
	else:
		raise TypeError(repr(obj) + " is not JSON serializable!")

@login_required
def index(request):

	latest_news = []
	myTags = []

	mtags = Tag.objects.filter(user__username__exact=request.user.username).order_by('tag_name')
	feeds = UserFeed.objects.filter(username__username__exact=request.user.username)
	uncatagorized_feeds = UserFeed.objects.filter(username=request.user, tags = None).order_by("feed__name")

	for tag in mtags:
		myTags.append({"tag": tag, "feeds": feeds.filter(tags=tag).order_by("feed__name")})

	myFeeds = []
	for feed in feeds:
		myFeeds.append(feed.feed) 
                
	#
	# return the last 10 feed items
	#
	FeedItems = FeedItem.objects.filter(site__in=myFeeds).order_by('-addedDate')[:10]

	for feedItem in FeedItems:
		summary = re.sub(r'<[^>]*?>', '', feedItem.summary)
		if feedItem.site.logo:
			site_logo = feedItem.site.logo
		else:
			site_logo = "http://theme.wiked.org/images/empty.png"

		if len(summary) > 300:
			summary = summary[:300] + "[...]"
		else:
			summary = summary

		latest_news.append({"uuid": feedItem.story_uuid, "title": feedItem.title, "summary": summary, "url": feedItem.url, "logo": site_logo})
#		
#	try:
#		inbox = UserInbox.objects.filter(username__username__exact=request.user.username)[0].inbox.all()
#	except:
#		inbox = None
#
	return render_to_response('news/index.html', locals())

@login_required
def viewInbox(request):

	inbox = UserInbox.objects.filter(username__username__exact=request.user.username)[0].feedItem.all()
	return render_to_response('inbox/index.html', locals())

@login_required
def addFeed(request):

	if request.method == 'POST':
		form = AddFeedForm(request.POST)
		if form.is_valid():
			cd = form.cleaned_data
			FeedStaging(url=cd['url']).save()
			return HttpResponseRedirect('/feeds/thanks')
	else:
		form = AddFeedForm()

	return render_to_response('addfeed.html', {'form': form})

@login_required
def ajax_addFeed(request):

	error = False
	ret = {}

	if 'url' in request.POST:

		url = request.POST['url']

		if url:

			if 'subscribe' in request.POST:

				subscribe = request.POST['subscribe']
				FeedStaging(url=url,user=request.user.username).save()

			else:
				FeedStaging(url=url).save()
		else:
			ret['success'] = False
	else:
		ret['success'] = False

	return ret

def feedThanks(request):
	return render_to_response('feedThanks.html')
	
def search(request):
	error = False
	if 'q' in request.GET:
		q = request.GET['q']
		if not q:
			error = True
		else:
			news = FeedItem.objects.filter(title__icontains=q).order_by('-updatedDate')
			return render_to_response('search_results.html',
				{'news': news, 'query': q})

	return render_to_response('search_form.html', {'error': error})

def simple_ajax_search(request):
	error = False
	ret = {}
	if 'q' in request.POST:
		q = request.POST['q']
		if q:
			news = FeedItem.objects.filter(title__icontains=q).order_by('-updatedDate')
			ret['results'] = news
		else:
			ret['success'] = False
	return ret

def ajax_grab_latest_news(request):

	error = False
	ret = {}

	latest_news = []
	f = UserFeed.objects.filter(username__username__exact=request.user.username)
	myFeeds = f[0].feed.all().order_by('name')

	#
	# return the last 10 feed items
	#
	FeedItems = FeedItem.objects.filter(site__in=myFeeds).order_by('-addedDate')[:10]

	for feedItem in FeedItems:
		summary = re.sub(r'<[^>]*?>', '', feedItem.summary)
		if feedItem.site.logo:
			site_logo = feedItem.site.logo
		else:
			site_logo = "http://theme.wiked.org/images/empty.png"

		if len(summary) > 300:
			summary = summary[:300] + "[...]"
		else:
			summary = summary

		latest_news.append({"uuid": feedItem.story_uuid, "title": feedItem.title, "summary": summary, "url": feedItem.url, "logo": site_logo})

	ret['results'] = latest_news
	ret['success'] = True

	return json_response(ret)

def grab_feed(request, site_uuid):
	error = False
	ret = {}

	if site_uuid:
		
		site = Feed.objects.filter(site_uuid=site_uuid)[0]
		d = site.next_update - datetime.now()

		if site.logo:
			site_logo = site.logo
		else:
			site_logo = ""

		nextUpdate = (d.seconds * 1000)
		ret['nextUpdate'] = nextUpdate

		latest_news = []
		for item in FeedItem.objects.filter(site=site).order_by('-addedDate').annotate()[:10]:

			summary = re.sub(r'<[^>]*?>', '', item.summary)
			if len(summary) > 300:
				summary = summary[:300] + "[...]"

			latest_news.append({"uuid": item.story_uuid, "title": item.title, "summary": summary, "url": item.url, "logo": site_logo})

		ret['results'] = latest_news
		ret['success'] = True

	else:
		ret['success'] = False

	return json_response(ret)

def grab_item(request, story_uuid):
	error = False
	ret = {}

	if story_uuid:
		d = FeedItem.objects.filter(story_uuid=story_uuid)[0]
		ret['results'] = d.summary
		ret['results'] = ret['results'] + "<br/><br/>"
		ret['results'] = ret['results'] + "<a href=" + d.url + ">" + d.url + "</a>"
	else:
		ret['success'] = False

	return ret
